#!/usr/bin/env bash

# Unoffical Bash "strict mode"
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
#ORIGINAL_IFS=$IFS
IFS=$'\t\n' # Stricter IFS settings

usage() {
    cat <<EOF
    Usage: to_server [options]

    Options:
    --destination_server                 Hostname of the remote server to rsync
                                         the files to
    --destination_dir                    Path the directory on the remote server
    --source                             The directory to rsync to the server
    --exclude-gitignored                 Exclude files that match the patterns
                                         in the gitignores
    --delete                             Delete files on the target server that
                                         no longer exist in the source directory
    --include-repo                       Whether or not to sync the git
                                         repository. Defaults to false.
EOF
}

error_exit() {
    usage
    exit 1
}

sync() {
    source_dir=$1
    destination_server=$2
    destination_dir=$3
    exclude_gitignored=$4
    delete=$5
    include_dot_git=$6
    local temp_file

    # Base command
    command_array=(-p -r $source_dir $destination_server:$destination_dir)

    if [ "$exclude_gitignored" = true ]; then
        # Build a list of excluded files, write them to a temp file and pass
        # that file to --exclude-from, as per https://stackoverflow.com/a/35927535/1245380
        temp_file=$(mktemp /tmp/excludes.XXXXXX)
        git -C "$source_dir" ls-files --exclude-standard -oi --directory > "$temp_file"
        command_array+=(--exclude-from="$temp_file")
    fi

    if [ "$include_dot_git" = false ]; then
        command_array+=(--exclude='.git')
    fi

    if [ "$delete" = true ]; then
        command_array+=(--delete)
    fi

    set -x
    rsync "${command_array[@]}"
    set +x

    if [ "$exclude_gitignored" = true ]; then
        rm "$temp_file"
    fi
}

get_value() {
  raw_flag=$1
  first=${1#*'='}
  second=$2

  # If the raw flag contains an equals sign and the value after it (first) is
  # not null return first, otherwise return the next argument (second)
  if [[ "$raw_flag" == *=* ]] && [ -n "$first" ]; then
    echo "$first"
  else
    if [[ "$second" == -* ]]; then
      echo "$second"
    else
      echo "$second"
    fi
  fi
}

get_shift_count() {
  if [[ "$1" == *=* ]]; then
    echo "1"
  else
    echo "2"
  fi
}

destination_dir=""
destination_server=""
exclude_gitignored=false
delete=false
include_dot_git=false

while :; do
    case ${1:-} in
        -h|-\?|--help)
            usage
            exit
            ;;
        -s|--source|--source=*)
            s_dir=$(get_value "$1" "${2:-}")
            shift $(get_shift_count "$1")
            ;;
        -m|--destination_server|--destination_server=*)
            destination_server=$(get_value "$1" "${2:-}")
            shift $(get_shift_count "$1")
            ;;
        -d|--destination_dir|--destination_dir=*)
            destination_dir=$(get_value "$1" "${2:-}")
            shift $(get_shift_count "$1")
            ;;
        -g|--exclude-gitignored)
            exclude_gitignored=true
            shift
            ;;
        -f|--delete)
            delete=true
            shift
            ;;
        -r|--include-repo)
            include_dot_git=true
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            if [ -z "${1:-}" ]; then
                break
            else
                echo "Unknown option ${1:-}"
                error_exit
            fi
    esac
done

source_dir=${s_dir-"."}

if [ -z "$destination_server" ] || [ -z "$destination_dir" ]; then
    error_exit
else
    echo "Syncing $source_dir to $destination_server:$destination_dir"
    sync $source_dir $destination_server $destination_dir $exclude_gitignored $delete $include_dot_git
    echo "Complete sync of $source_dir"
fi
